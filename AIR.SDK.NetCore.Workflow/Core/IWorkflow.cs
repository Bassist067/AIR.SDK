using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Amazon.SimpleWorkflow;
using Amazon.SimpleWorkflow.Model;

namespace AIR.SDK.Workflow.Core
{
	/// <summary>
	/// A main workflow interface. Includes Amazon registration routine and main Workflow properties. 
	/// </summary>
	public interface IWorkflow : IRegistrable/*, ICloneable*/
	{
		IWorkflowOptions Options { get; }

		/// <summary>
		/// A SWF domain. Each SWF entity runs in specific domain.
		/// </summary>
		//string Domain { get; }

		/// <summary>
		/// Workflow version. Use this for storing the old a new workflow implementations.
		/// </summary>
		//string Version { get; }

		/// <summary>
		/// TaskList is a grouping key for Amazon  You can set activity workers polling for specific task lists.
		/// </summary>
		TaskList TaskList { get; }

		/// <summary>
		/// ChildPolicy is used to configure child workflow behaviours. Child Wrorkflow is a workflow runnings within other workflow.
		/// </summary>
		ChildPolicy ChildPolicy { get; set; }

		/// <summary>
		/// Workflow initial input data.
		/// </summary>
		string Input { get; set; }

		/// <summary>
		/// Serialized output object of the last activity.
		/// </summary>
		string Result { get; set; }
		
		/// <summary>
		/// An auto-generated unique workflow ID.
		/// </summary>
		string WorkflowId { get; set; }

		/// <summary>
		/// The runId of a workflow execution. This ID is generated by the service and 
		/// can be used to uniquely identify the workflow execution within a domain.
		/// </summary>
		string RunId { get; set; }

		/// <summary>
		/// Use Control for storing additional execution data 
		/// </summary>
		//string Control { get; set; }
		/// <summary>
		/// Tagging enables you to filter your results when you use visibility actions to list or count workflow executions.
		/// </summary>
		List<string> TagList { get; set; }

		/// <summary>
		/// Indicates whether all activity and workflow types should be checked and registered on SWF 
		/// before the main workflow is started.
		/// Default value is True. 
		/// </summary>
		bool CheckRegisterTypes { get; set; }

		/// <summary>
		/// TaskStartToCloseTimeout is a default value for all child activities. Set this to ensure all activities having the same TaskStartToCloseTimeout value.
		/// </summary>
		//int TaskStartToCloseTimeout { get; set; }

		/// <summary>
		/// ExecutionStartToCloseTimeout is a default value for all child activities. Set this to ensure all activities having the same ExecutionStartToCloseTimeout value.
		/// </summary>
		//int ExecutionStartToCloseTimeout { get; set; }

		/// <summary>
		/// A duration (in days) for which the record (including the history) of workflow executions in this domain should be kept by the service. 
		/// After the retention period, the workflow execution will not be available in the results of visibility calls. 
		/// If you pass the value NONE then there is no expiration for workflow execution history (effectively an infinite retention period). 
		/// </summary>
		//int WorkflowExecutionRetentionPeriodInDays { get; set; }

		/// <summary>
		/// A main method used for implemented complex workflow logic such as conditionals.
		/// </summary>
		/// <param name="stepKey">Unique key of current workflow step.</param>
		/// <param name="prevStepResult">A serialized current workflow output data.</param>
		/// <returns>Unique key of next step to be scheduled.</returns>
		IResult<object> GetNextStep(string stepKey, string prevStepResult);
		//Func<string, string, IResult<object>> NextStepHandler { get; set; }

		/// <summary>
		/// Returns an actvity instance.
		/// </summary>
		/// <param name="activityId">Unique activity ID</param>
		IActivity GetActivity(string activityId);

		/// <summary>
		/// Starts workflow execution
		/// </summary>
		/// <param name="input">Initial serialized object input</param>
		/// <param name="defaultCancellationToken">Pass</param>
		string StartWorkflow(string input, CancellationToken defaultCancellationToken = default (CancellationToken));

		Task<string> StartWorkflowAsync(string input, CancellationToken defaultCancellationToken = default (CancellationToken));

		/// <summary>
		/// Starts independent workflow and activity workers.
		/// </summary>
		void ExecuteWorkers(CancellationToken defaultCancellationToken = default (CancellationToken));

		/// <summary>
		/// Attaches an <see cref="IActivity"/> or child <see cref="IWorkflow"/> as the next step of a workflow.
		/// </summary>
		WorkflowBase AttachStep(ISchedulable action);

		/// <summary>
		/// Attaches an <see cref="IActivity"/> or child <see cref="IWorkflow"/> as the next step of a workflow.
		/// </summary>
		WorkflowBase AttachStep(string stepKey, ISchedulable action);

	}
}